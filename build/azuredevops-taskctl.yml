# Azure DevOps pipeline file using Taskfile as the runner
# This is so that the main build and tests can be run in the same way
# on a local machine as well as in the CLI

# Set the name which will define the build number
name: 0.0$(Rev:.r)

# Set the agent pool that is going to be used for the build
pool:
  vmImage: ubuntu-20.04

variables:
  - template: azuredevops-vars.yml

stages:
  - stage: Build

    jobs:

    - job: Build
      steps:

      # Install Taskfile for the build to run
      - task: Bash@3
        displayName: Install Taskctl
        inputs:
          targetType: inline
          script: |
            wget https://github.com/taskctl/taskctl/releases/download/${{ variables.TaskctlVersion }}/taskctl_${{ variables.TaskctlVersion }}_linux_amd64.tar.gz -O /tmp/taskctl.tar.gz
            tar zxf /tmp/taskctl.tar.gz -C /usr/local/bin taskctl 

      # Run the tasks to build the application
      - task: Bash@3
        displayName: Build & Test
        inputs:
          targetType: inline
          script: |
            taskctl build
        env:
          BUILDNUMBER: $(Build.BuildNumber)

      - task: Bash@3
        displayName: Outputs
        inputs:
          targetType: inline
          script: |
            tree outputs

      # Upload the tests and the coverage
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: $(Build.SourcesDirectory)/outputs/tests/report.xml
          testRunTitle: UnitTests

      - task: PublishCodeCoverageResults@1 
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(Build.SourcesDirectory)/outputs/tests/coverage.xml

      # Upload the binary files
      - task: PublishBuildArtifacts@1
        displayName: Publish Binaries
        inputs:
          pathToPublish: $(Build.SourcesDirectory)/outputs/bin
          artifactName: StacksCLI      

      # Upload the documentation
      - task: PublishBuildArtifacts@1
        displayName: Publish Documentation
        inputs:
          pathToPublish: $(Build.SourcesDirectory)/outputs/docs
          artifactName: docs

  - stage: IntegrationTests
    dependsOn: Build
    condition: succeeded()

    jobs:
    
    - job: IntegrationTests

      steps:  

      # Download the StacksCLI and the integration_tests
      - task: DownloadPipelineArtifact@2
        inputs: 
          artifact: StacksCLI
          path: $(Build.SourcesDirectory)/outputs/bin

      # Install Taskfile so that the tests can be run
      - task: Bash@3
        displayName: Install Taskctl
        inputs:
          targetType: inline
          script: |
            wget https://github.com/taskctl/taskctl/releases/download/${{ variables.TaskctlVersion }}/taskctl_${{ variables.TaskctlVersion }}_linux_amd64.tar.gz -O /tmp/taskctl.tar.gz
            tar zxf /tmp/taskctl.tar.gz -C /usr/local/bin taskctl   

      # Run the integration tests
      - task: Bash@3
        displayName: Execute Tests
        inputs:
          targetType: inline
          script: |
            export GOBIN=$HOME/go/bin
            export PATH=$PATH:$GOBIN
            taskctl inttest
        env:
          BIN_DIR: $(Build.ArtifactStagingDirectory)/bin
          BUILDNUMBER: $(Build.BuildNumber)
          WORKING_DIR: $(Build.SourcesDirectory)/projects

      # Upload the integration test results
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: $(Build.SourcesDirectory)/outputs/tests/integration_test_report.xml
          testRunTitle: IntegrationTests

  - stage: Release
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

    variables:
      - group: amido-stacks-webapp

    jobs:

    - job: CreateGHRelease

      steps:
        # Download the necessary artifacts from the previous stage
        # - documentation
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: 'docs'
            patterns: '**/*.pdf'
            path: $(Build.SourcesDirectory)/outputs/assets

        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: 'StacksCLI'
            path: $(Build.SourcesDirectory)/outputs/assets
            patterns: |
              **
              !**/*inttest*

        # Install Taskfile for the build to run
        - task: Bash@3
          displayName: Install Taskctl
          inputs:
            targetType: inline
            script: |
              wget https://github.com/taskctl/taskctl/releases/download/${{ variables.TaskctlVersion }}/taskctl_${{ variables.TaskctlVersion }}_linux_amd64.tar.gz -O /tmp/taskctl.tar.gz
              tar zxf /tmp/taskctl.tar.gz -C /usr/local/bin taskctl 

        # Run the tasks to build the application
        - task: Bash@3
          displayName: Release
          inputs:
            targetType: inline
            script: |
              taskctl release
          env:
            BUILDNUMBER: $(Build.BuildNumber)
            API_KEY: $(GITHUB_TOKEN)
            NOTES:
            COMMIT_ID: $(Build.SourceVersion)
            ARTIFACTS_DIR: outputs/assets
            OWNER: ${{ variables.RepoOwner }}
            REPONAME: ${{ variables.RepoName }}